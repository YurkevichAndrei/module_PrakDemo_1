# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PrakDemo_1
                                 A QGIS plugin
 PrakDemo_1
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by RGBO-01-19 by RTU MIREA
        email                : lkj@kg.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .PrakDemo_1_dialog import PrakDemo_1Dialog
import os.path

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QObject, pyqtSignal
from qgis.PyQt.QtGui import QIcon, QMovie
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem, QMessageBox
from qgis.core import QgsGeometry, QgsPointXY, QgsPoint, QgsProject, QgsMapLayerType
import threading, time
import multiprocessing
# import pydevd_pycharm


class PrakDemo_1:
    """QGIS Plugin Implementation."""
    # pydevd_pycharm.settrace('localhost', port=5566, stdoutToServer=True, stderrToServer=True)

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PrakDemo_1_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&PrakDemo_1')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PrakDemo_1', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/PrakDemo_1/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&PrakDemo_1'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PrakDemo_1Dialog()

        # show the dialog
        # self.dlg.label.setVisible(False)
        self.dlg.show()
        print("----------Начало-------------")

        change = False
        flag = True
        change2 = {}
        ldd_lrs = QgsProject.instance().layerTreeRoot().children()
        nabor_sloy = []
        for i in range(0, len(ldd_lrs)):
            lay = ldd_lrs[i].layer()
            if lay.type() == QgsMapLayerType.VectorLayer:
                nabor_sloy.append(lay)
        # nabor_sloy = self.iface.mapCanvas().layers()
        sloy_names = []
        for ts in nabor_sloy:
            print(ts.name())
            sloy_names.append(ts.name())
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems(sloy_names)
        self.dlg.tableWidget_2.setVisible(False)
        #
        i_sloy = self.dlg.comboBox.currentIndex()
        s_sloy = nabor_sloy[i_sloy]
        item_last = ''
        threads = []
        # up_signal = pyqtSignal(name='up_signal')

        print("-----------------------")

        def progress(value: int):
            self.dlg.progressBar.setValue(value)

        @QtCore.pyqtSlot()
        def form():
            self.dlg.comboBox.setEnabled(True)
            self.dlg.progressBar.setVisible(False)
            self.dlg.tableWidget.setVisible(True)
            self.dlg.pushButton_change_geom.setEnabled(True)
            self.dlg.tableWidget.resizeColumnsToContents()
            self.dlg.progressBar.reset()
            # nonlocal flag
            # flag = True

        self.dlg.up_signal.connect(form)

        def thread_table_write(features, lenth):
            # self.dlg.tableWidget.setVisible(False)
            num = 0
            one = int(lenth / 100)
            if lenth <= 100:
                one = 1
            container = one
            for f in features:  # f - один объект по порядку списка
                if num == container:
                    container += one
                    proc = int(container / one)
                    progress(proc)

                geom = f.geometry()
                self.dlg.tableWidget.setItem(f.id(), 0, QTableWidgetItem(str(f.attribute(0))))
                self.dlg.tableWidget_2.setVisible(False)
                if geom.type() == 0:    # тип геометрии - точка
                    vertex = geom.vertexAt(0)
                    self.dlg.tableWidget.setItem(f.id(), 1, QTableWidgetItem(str(vertex.x())))
                    self.dlg.tableWidget.setItem(f.id(), 2, QTableWidgetItem(str(vertex.y())))
                elif geom.type() == 1 or geom.type() == 2:
                    self.dlg.tableWidget.resizeColumnsToContents()
                num += 1
            self.dlg.up_signal.emit()

        def table_write(sloy):
            # nonlocal flag
            # flag = False
            self.dlg.tableWidget.clear()
            if sloy.geometryType() == 0:
                self.dlg.pushButton_change_geom.setVisible(True)
                self.dlg.tableWidget.setColumnCount(3)
                self.dlg.tableWidget.setHorizontalHeaderLabels(["osmID", "Lat", "Lon"])
            else:
                self.dlg.pushButton_change_geom.setVisible(False)
                self.dlg.tableWidget.setColumnCount(1)
                self.dlg.tableWidget.setHorizontalHeaderLabels(["osmID"])
            self.dlg.tableWidget.setRowCount(sloy.featureCount())

            features = sloy.getFeatures()

            thrd = threading.Thread(target=thread_table_write, args=(features, len(sloy)))
            # thrd = multiprocessing.Process(target=thread_table_write, args=(features, len(sloy)))
            threads.append(thrd)
            self.dlg.tableWidget.setVisible(False)
            self.dlg.progressBar.setVisible(True)
            self.dlg.comboBox.setEnabled(False)
            self.dlg.pushButton_change_geom.setEnabled(False)

            progress(0)
            thrd.start()

        def table_read(sloy):
            sloy.startEditing()
            features = sloy.getFeatures()
            for f in features:  # f - один объект по порядку списка
                x = float(self.dlg.tableWidget.item(f.id(), 1).text())
                y = float(self.dlg.tableWidget.item(f.id(), 2).text())
                sloy.changeGeometry(f.id(), QgsGeometry.fromPointXY(QgsPointXY(x, y)))
            sloy.commitChanges(True)

        def table_2_write(geom):
            if geom.type() == 1 or geom.type() == 2:
                self.dlg.tableWidget_2.clear()
                self.dlg.tableWidget_2.setVisible(True)
                self.dlg.tableWidget_2.setColumnCount(2)
                self.dlg.tableWidget_2.setHorizontalHeaderLabels(["Lat", "Lon"])

                points_list = []
                if geom.type() == 1:
                    points_list = str(geom.asMultiPolyline()).replace('[', '').replace(']', '').split(', ')
                elif geom.type() == 2:
                    points_list = str(geom.asMultiPolygon()).replace('[', '').replace(']', '').split(', ')

                if len(points_list) != 0:
                    self.dlg.tableWidget_2.setRowCount(len(points_list))
                    i = 0
                    for point in points_list:
                        p = point.replace('(', ' ').replace(')', ' ').split(' ')
                        self.dlg.tableWidget_2.setItem(i, 0, QTableWidgetItem(p[2]))
                        self.dlg.tableWidget_2.setItem(i, 1, QTableWidgetItem(p[3]))
                        p.clear()
                        i += 1
                    self.dlg.tableWidget_2.resizeColumnsToContents()
                points_list.clear()
            else:
                self.dlg.tableWidget_2.setVisible(False)

        def table_2_read(sloy, id_obj, geom):
            nonlocal change2
            sloy.startEditing()
            print(len(change2))
            for key in change2.keys():
                if change2[key]:
                    x_lon = self.dlg.tableWidget_2.item(key, 1).text()
                    y_lat = self.dlg.tableWidget_2.item(key, 0).text()
                    geom.moveVertex(float(y_lat), float(x_lon), key)
                    sloy.changeGeometry(id_obj, geom)
            sloy.commitChanges(True)
            change2.clear()

        def table_2_item_change(item_tab):
            nonlocal change2
            nonlocal change
            change = True
            change2[item_tab.row()] = True

        def table_clicked(item_tab):
            nonlocal item_last
            if item_last == '':
                item_last = item_tab
            nonlocal change
            sloy = nabor_sloy[self.dlg.comboBox.currentIndex()]
            feature = sloy.getFeature(item_tab.row())
            geom = feature.geometry()
            if not change:
                self.dlg.tableWidget_2.itemChanged.disconnect(table_2_item_change)
                table_2_write(geom)
                self.dlg.tableWidget_2.itemChanged.connect(table_2_item_change)
            else:
                change = False

                msg_box = QMessageBox()
                msg_box.setIcon(QMessageBox.Question)
                msg_box.setText("Вы хотите сохранить изменения?")
                msg_box.setWindowTitle("Сохранение изменений")
                msg_box.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
                return_value = msg_box.exec()

                if return_value == QMessageBox.Yes:
                    print('ДА clicked')
                    table_2_read(sloy, item_last.row(), sloy.getFeature(item_last.row()).geometry())
                    table_clicked(item_tab)
                elif return_value == QMessageBox.No:
                    print('НЕТ clicked')
                    self.dlg.tableWidget_2.itemChanged.disconnect(table_2_item_change)
                    table_2_write(geom)
                    self.dlg.tableWidget_2.itemChanged.connect(table_2_item_change)
            item_last = item_tab

        def btn_click_ok():
            print("click_Ok")

            sloy = nabor_sloy[self.dlg.comboBox.currentIndex()]
            set_filter = []
            sf = sloy.selectedFeatures()

            if len(sf) > 0:
                for f in sf:
                    set_filter.append(f.id())
                exp = str(set_filter).replace('[', '(').replace(']', ')').replace('L', '')
                print(exp)
                subset = "fid in " + exp
                print(len(subset))
                sloy.setSubsetString(subset)
                '''if len(subset)<=28840:
                    s_sloy.setSubsetString(subset)'''
            else:
                sloy.setSubsetString("")

        def btn_click_cancel():
            print("Click Cancel or Close")

            nonlocal flag
            if flag:
                self.dlg.comboBox.currentIndexChanged.disconnect(ch_indx)
                self.dlg.pushButton_Ok.clicked.disconnect(btn_click_ok)
                self.dlg.pushButton_Cancel.clicked.disconnect(btn_click_cancel)
                self.dlg.pushButton_change_geom.clicked.disconnect(btn_click_change_geom)
                self.dlg.tableWidget.itemClicked.disconnect(table_clicked)
                self.dlg.tableWidget_2.itemChanged.disconnect(table_2_item_change)
                self.dlg.finished.disconnect(btn_click_cancel)
                self.dlg.up_signal.disconnect(form)
                # for thread in threading.enumerate():
                #     if not "MainThread" in thread.name:
                #         # StoppableThread(thread).stop()
                #         thread._stop_event.set()
                #     if not "MainThread" in thread.name:
                #         thread._Thread__stop()
                self.dlg.close()
            else:
                msg_box = QMessageBox()
                msg_box.setIcon(QMessageBox.Infomation)
                msg_box.setText("Дождитесь загрузки таблицы")
                msg_box.setWindowTitle("Предупреждение")
                msg_box.exec()

        def ch_indx():
            nonlocal change
            nonlocal change2
            change = False
            change2.clear()
            self.dlg.tableWidget_2.setVisible(False)
            sloy = nabor_sloy[self.dlg.comboBox.currentIndex()]
            if sloy.geometryType() == 1 or sloy.geometryType() == 2:
                self.dlg.pushButton_change_geom.setVisible(False)
            else:
                self.dlg.pushButton_change_geom.setVisible(True)
            table_write(sloy)
            print(sloy.name())

        def change_geom1():
            self.dlg.pushButton_change_geom.setEnabled(False)
            self.dlg.pushButton_Cancel.setEnabled(False)
            self.dlg.pushButton_Ok.setEnabled(False)

        def change_geom2():
            self.dlg.pushButton_change_geom.setEnabled(True)
            self.dlg.pushButton_Cancel.setEnabled(True)
            self.dlg.pushButton_Ok.setEnabled(True)

        def btn_click_change_geom():
            print("Click Change Geometry")

            sloy = nabor_sloy[self.dlg.comboBox.currentIndex()]
            if sloy.geometryType() == 0:
                change_geom1()
                # while self.dlg.pushButton_Cancel.isEnabled():
                #     continue
                print("ssssssssss1")
                thrd = threading.Thread(target=table_read, args=sloy)
                threads.append(thrd)
                thrd.start()
                thrd.join()
                # table_read(sloy)
                print("ssssssssss2")
                change_geom2()
                # while not self.dlg.pushButton_Cancel.isEnabled():
                #     continue

        def connecting():
            self.dlg.comboBox.currentIndexChanged.connect(ch_indx)
            self.dlg.pushButton_Ok.clicked.connect(btn_click_ok)
            self.dlg.pushButton_Cancel.clicked.connect(btn_click_cancel)
            self.dlg.pushButton_change_geom.clicked.connect(btn_click_change_geom)
            self.dlg.tableWidget.itemClicked.connect(table_clicked)
            self.dlg.tableWidget_2.itemChanged.connect(table_2_item_change)
            self.dlg.finished.connect(btn_click_cancel)

        connecting()

        table_write(s_sloy)

        # Run the dialog event loop
        # result = self.dlg.exec_()
        # # See if OK was pressed
        # print(result)
        # if result:
        #     # Do something useful here - delete the line containing pass and
        #     # substitute with your code.
        #     pass


# class StoppableThread(threading.Thread):
#     """Thread class with a stop() method. The thread itself has to check
#     regularly for the stopped() condition."""
#
#     def __init__(self,  *args, **kwargs):
#         super(StoppableThread, self).__init__(*args, **kwargs)
#         self._stop_event = threading.Event()
#
#     def stop(self):
#         self._stop_event.set()
